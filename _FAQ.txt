=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-= ROBOROBO.4 -=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=- 2008-2021 -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-= nicolas.bredeche(at)sorbonne-universite.fr -=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

=-=-=-=-=-=
= F.A.Q.  =
=-=-=-=-=-=

Q: What is the licence under which roborobo is distributed?
A: Creative Commons, BY SA â€” http://creativecommons.org/licenses/by-sa/4.0/

Q: Can I cite roborobo in my scientific paper?
A: Yes. Please cite https://arxiv.org/abs/1304.2888

Q: What it the current version of roborobo and what is the main difference with previous version?
A: This is version 4. It uses SDL2 (and SDL2_image) and pyRoborobo, a python interface to the C++ core. Roborobo is extensively used on both Mac OS X and Linux (Ubuntu) on a daily basis and has been used for quite many scientific publications.

Q: I want to start coding now!
A: If you want to start *right now*:
    (1) [SUGGESTED] with Python, check the pyRoborobo_examples directory. Then run: "python tutorial.py". Then read the manual in build/docs
    (2) with C++? check TutorialController.cpp file in the ./prj/Tutorial/src/ folder. Then run: "./roborobo -l config/Tutorial.properties". Then read the manuel in _HELP.txt

Q: roborobo segmentation fault just after the simulation starts (instantly after the windows is displayed, or a few seconds after).
A: You may be using a corrupted background image. For example, you expect the colors are either obstacle=(0,0,0) and empty=(255,255,255), but you have a (255,255,254) pixel somewhere. When the robot proximity sensors hits this pixel, a callback is sent to a non-existing object. 

Q: roborobo segmentation fault before the simulation even starts.
A: You may be running a simulation with a very large number of robots, and your computer cant hold it (e.g. 100000 agents requires more than 32go RAM).

Q: How to add a new arena/robot/sensorlayout/...?
A: (a) if you want to modify an existing environment, first check the properties file in the config/ directory ; (b) if you want to draw a new arena or redefined the sensor layout, check existing example in the data/ directory (the properties file should tell you which one are used). When creating/modifying an image, the only -- very important -- rule is to use 32-bits uncompressed (BMP) image.

Q: Why use BMP files (over JPEG or PNG)?
A: As of roborobo version 3, roborobo only supports BMP images (while previous versions supported PNG). The reason is that there is a bug in SDL2_image, that prevent to load *exactly* the pixel values of the image, hence provoking problems with masks and images. This is caused by the automatic embedded calibration applied when SDL2_image's IMG_Load(...) function is called. Until this bug is solved, there will be no PNG support, and SDL2_image won't be required. cf.:
	- https://forums.libsdl.org/viewtopic.php?t=10013&sid=34e8ef7cf74074039495037c1a077025
	- http://stackoverflow.com/questions/24987165/sdl2-sdl-image-strange-png-behavior-with-rgb-values
Note, however, that (by default) dumping images is done in PNG format (smaller size). This can be changed using "gOutputImageFormat" to "BMP" (no value or any other value means PNG will be used).
    As for JPEG: JPEG uses a method with lossy compression. Roborobo needs the image encoding to be without loss.

Q: I am running roborobo remotely, typically on a cluster. Roborobo either hangs at startup (''connect localhost port xxxx: connection time out'') or crashes (segmentation fault) or do not find any suitable video driver ("cannot initialize SDL: Failed to connect to the Mir Server").
A: [short answer] check python script "replicate.py". This may be what you are looking for.
A: [longer answer] SDL needs to set up the video. You may change this by using a dummy video driver. type the following command: "env SDL_VIDEODRIVER=dummy ./roborobo -b (...)". The "-b" option enforces batch mode (no display, super-fast), the SDL_VIDEODRIVER ensures the dummy driver is used. If activated, you may use "aalib" driver for ASCII rendering in a terminal window (but you should compile SDL with aalib enabled) -- see http://sdl.beuc.net/sdl.wiki/SDL_envvars for more info.
A: [DEPRECATED, used to be for SDL1.2, but some info may still apply] First, check you have been running headless roborobo (value of gBatchMode in the properties file). If it still fails, it is most probably due to video initialization -- SDL tries to initialize the video, even if it wont be used. This can cause a problem, especially when exporting the display is not possible (slow connection, bad configuration, closed ports... -- this problem will also impact other X-based application, e.g. try ''xeyes''.). To avoid this: connect to the remote server such that exporting X is not an option (ie. use *always* the ''ssh'' command without any options -- *not* ''ssh -X'' or ''ssh -Y''). This will force SDL to bypass the video initialization. Note that if aalib is installed and SDL is able to use it, any display from roborobo will be done in nice ascii art within the very terminal. If this does not solve the problem, then try changing, or reconfiguring, your terminal application, and/or type ''export TERM=xterm'' in the console.

Q: Are there guidelines, hints, tutorials?
A: Check _HELP.TXT for general information, or the pyRoborobo doc in build/docs. There are numerous examples (C++ in the prj folder, Python in the pyRoborobo folder).

Q: Can you add...? Can you help...?
A: Unfortunatly, roborobo is provided "as is" and is not really supported. You'll have to find out by yourself, or chat with others. But you may always ask, of course.

Q: [deprecated?] I have some strange image related i/o processing problems under MACOSX (e.g. rendering is ok, but sensors dont seem to work) ?
A: At some point, some versions of SDL may cause problems -- if you experience strange problem such as error wrt. sensor numbering, this may be caused by a too recent SDL. Install an older version (it works with 1.2.14), or the newest ones.

Q: [deprecated] I am using MacOS X 10.14 (Mojave). When roborobo starts, I get a black screen though the simulator is running (from the console messages). The display turns to normal as soon as I resize or move the window. What's happening?
A: This is a bug due to the OS, which is triggered by a call to SDL_PollEvent(...). Note that this does not affect the simulation (just the display). It has been fixed in SDL 2.0.9. Cf. https://bugzilla.libsdl.org/show_bug.cgi?id=4272

Q: How can I run roborobo in batch mode for fast computation?
A: it is enough to set the gBatchMode parameter value  to 'true' in the properties file (also, I suggest to switch to gDisplayMode = 2 and gVerbose=false). Note that we daily use this to launch stand-alone roborobo processes on the lab's cluster of machines as well as the Grid 5000 national cluster (ie. machines without video output) and this works like a charm. However, we never tried with a remote Mac (I use a mac, but not remotely) but it can be locally run headless.

Q: [C++] How can I modify roborobo core to implement ...(whatever)... ?
A: You really should consider to stick with your project. Mostly because your desired feature may have an impact of roborobo's stability and/or speed, which is not the best thing as the code is shared among several people. If you really need a specific feature, the good way is to inherit from existing class and rewrite what you need *within your project*. 

Q: [C++] But I really want to modify roborobo's core!
A:
  - Case 1, you downloaded roborobo and use it for personal purpose: do what you want, but dont expect future release to be compatible with your personal version of roborobo... If you want to correct a well-identified bug, please contact me :-)
  - Case 2, we are working on a joint project: PLEASE NO! YOU ARE NOT GOING TO MODIFY THE CORE! At least not before you ask me! If you spot a bug, i'd be delighted to know about it and most happy if you send me a patch. But i'd really like to apply the patch by myself to double-check and approve it. Sorry for being paranoid, but we all depend on this code. Of course, you can always do your own fork version of roborobo and modify whatever you want to modify - but bear in mind that converging back to the ''official'' version is going to be *very* painful. Very *very*.

Q: [C++] I need to get/set new parameters on the properties file. How do i implement the read/write methods?
A: Actually you dont have to do anything. To access any data from your configuration file from anywhere, you just have to do the following:
  1. just add your new entry to your properties file (eg. "mydatatest = 0" in test.properties)
  2. then, from *anywhere* in your source code:
  'gProperties.checkAndGetPropertyValue("mydataset",&myvariable,true);'
  That's all. Of course, it's up to you to test the consistency of your variable.

Q: How can I modify the dynamics of my robot, apply external forces, etc.?
A: a WorldInterface implements the influence of robot dynamics (hardware and context-dependant) (check _INFO.TXT). Then, you have to inherit from the WorldInterface to implement your own dynamics.

Q: Is it possible to speed up roborobo?
A: Yes. Avoid using a past version of roborobo (ver.1 used to feature at least two O(n^2) algorithms). You should run it without vizualization (gDisplayMode=2 in the config file, or with ''d'' key in the GUI), and use ''{mini}agent-mask-edgesOnly'' as the robot mask (in the config file). You may want to add a new property also, ''gAgentDisplayImageFilename'' with value ''{mini}agent-mask'', to keep rendering as before.

Q: How to record trajectories from agent(s)?
A: It can be done in three ways: (1) within the GUI, use the 't' or shift+'t' command (see help); (2) within the config file, set 'gTrajectoryMonitor=true' (and, optionaly, 'gTrajectoryMonitorMode=1 or 2'); (3) within the code, explicitly calling the following methods [C++ -- check tutorials for pyRoborobo example] : (a) gTrajectoryMonitorImage = load_image( gEnvironmentImageFilename ); (b) updateTrajectoriesMonitor() and (c) saveTrajectoryImage(). In all cases, an image will be saved in the logs directory. This trajectory tracking code use very little computing power (<10% slow down).
This is provided as is for quick vizualization, you may want something more complex/different. The correct way to get it is *not* to modify the code, but rather to dump the coordinates of your agents for external processing.

Q: Roborobo seems to run slower on my Mac compared to a similar machine on Linux?
A: Check the build target: debug or release?

Q: [possibly deprecated w/ SDL2] I tested roborobo for memory leaks with Valgrind, there are plenty of them!
A: (if your code is not responsible for these:) SDL has been known to trigger some leaks. Actually, these are not ''real'' memory leaks. Check the internet for further explanations. Or be reassured: you can safely ignore them.

Q: I understand that logged image files beginning with "robotsId_(...)" display the location and id of each robot. But the image is just black!
A: The image is not just black, though it can look quite dark if you have few robots (<1000). Zoom in. Robotâ€™s id are counted from 1, ie. robot with id = 0 is display as red=0,green=0,blue=1. This is pretty close to black, isnâ€™t it. A way to make it clearer: use GIMP or Photoshop to change black to white â€” this will reveal the non black dots.

Q: I generate a lot of log files. Raw text files and BMP image files takes a awful lot of disk space! What can I do?
A: If you are running under Linux/Unix/MacOsX, the following commands are really useful (enter commands in terminal):
	- compressing all '.txt' files in the current directory, and *all* sub-directories (each .txt file is replaced by a .gz file):
		find . -name '*.txt' -execdir gzip {} \;
	- converting all BMP image files into PNG image format in the current directory, and *all* sub-directories (a .png file is created, the original file is kept):
		find . -name '*.bmp' -execdir mogrify -format png {} \;
	- deleting all BMP files in the current directory, and *all* sub-directories (USE WITH CARE):
		find . -name '*.bmp' -type f -delete

Q: What are the dependencies? How to install all dependencies?
A: Check the README.md

Q: Should I use g++ (or gcc) or clang++?
A: both works.

Q: I am using some python script from the tools sub-directory (or wherever) and I get an error with the message ending with "raise ValueError, 'unknown locale: %s' % localename" and "ValueError: unknown locale: UTF-8". (Ubuntu or MacOS).
A: Your script tries to import matplotlib and the LC_ALL environment variable is not properly defined. Solution: type "export LC_ALL=$LANG" in the terminal before running your python script (or put it in your login profile). Testing can be done by launching python interactive, then "import locale" then "locale.getdefaultlocale()" (raises the same error).

Q: I am using some of your python script and it does not work...?
A: Check which version is required for your script (Python 2 or 3?). Or, if in the tools sub-dir, it might just be that it is under development.

Q: How to make a video out of all these BMP files in the log directory?
A: There are many ways, and the answer is out-of-scope from this FAQ. Anyway, with ubuntu and macOS, I installed mplayer and use the following command-line:
    mencoder mf://*.bmp -mf fps=10 -ovc xvid -xvidencopts bitrate=10000 -o output.avi

Q: Roborobo sometimes generate a *lot* of data.
A: Yep. The BMP files takes a lot, you may want to create less of them (change parameters in the properties file) or to compress them (e.g. convert to JPG). You can also make a video out of them. The datalog files also are quite big. You can zip/tgz them, and you can also change the code to generate less data.

Q: How to record all displayed information?
A: It can be done by using the saveFullLoggerScreenshot() method. It records the environment image (objects and robots), the image footprint (object footprint) and a text file that contains all information that can observed externally (coordinates, orientation, LED RGB values and so on, also including landmark positions). If the display mode is either 0 or 1, it also record a snapshot of the rendered scene. It can be triggered either by using the "r" key (snapshot) or "shift+r" keys (start/stop sequence), or by changing the boolean value of gFullLoggerRecording. Note that full logging is both computationally and memory expensive. Information obtained that way can be used for detail analysis/debugging or 3rd party software rendering (e.g. draw a nice (but accurate) 3D rendering or your scene).

-n
